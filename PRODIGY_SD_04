// Sudoku Solver Application


package Task_04;

public class SudokuSolver {
    private static final int SIZE = 9;

    public static boolean solveSudoku(int[][] board) {
        int row = -1;
        int col = -1;
        boolean isEmpty = true;

        // Find the first empty cell
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == 0) {
                    row = i; 
                    col = j;
                    isEmpty = false;
                    break;
                }
            }
            if (!isEmpty) {
                break;
            }
        }

        // If no empty cell is found, the puzzle is solved
        if (isEmpty) {
            return true;
        }

        // Try filling the empty cell with numbers 1 to 9
        for (int num = 1; num <= SIZE; num++) {
            if (isValid(board, row, col, num)) {
                board[row][col] = num;

                // Recursively solve the puzzle
                if (solveSudoku(board)) {
                    return true;
                }

                // If no solution is found, backtrack
                board[row][col] = 0;
            }
        }

        // No solution found for the current configuration
        return false;
    }

    public static boolean isValid(int[][] board, int row, int col, int num) {
        // Check if num is not already in the current row and column
        for (int i = 0; i < SIZE; i++) {
            if (board[row][i] == num || board[i][col] == num) {
                return false;
            }
        }

        // Check if num is not already in the current 3x3 grid
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[startRow + i][startCol + j] == num) {
                    return false;
                }
            }
        }

        return true;
    }

    public static void printBoard(int[][] board) {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
    
    public static void main(String[] args) {
    	 int[][] board = {
                 {5, 3, 0, 0, 7, 0, 0, 0, 0},
                 {6, 0, 0, 1, 9, 5, 0, 0, 0},
                 {0, 9, 8, 0, 0, 0, 0, 6, 0},
                 {8, 0, 0, 0, 6, 0, 0, 0, 3},
                 {4, 0, 0, 8, 0, 3, 0, 0, 1},
                 {7, 0, 0, 0, 2, 0, 0, 0, 6},
                 {0, 6, 0, 0, 0, 0, 2, 8, 0},
                 {0, 0, 0, 4, 1, 9, 0, 0, 5},
                 {3, 0, 0, 0, 8, 0, 0, 7, 9}
         };
    	 
    	 System.out.println("Sudoku puzzle:");
         printBoard(board);
         
         if(solveSudoku(board)) {
        	 System.out.println("\nSolution : ");
        	 printBoard(board);
         }else {
        	 System.out.println("\nNo Solution Exists !!!");
         }


	}

}
